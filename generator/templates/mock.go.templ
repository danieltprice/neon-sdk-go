package sdk

import (
	"io"
	"net/http"
	"strconv"
	"strings"
)

// NewMockHTTPClient initiates a mock fo the HTTP client required for the SDK client.
// Mock client return the response as per API spec, except for the errors: 404 and 401 status codes are covered only.
// - 401 is returned when the string `invalidApiKey` is used as the API key;
// - 404 is returned if either of the following:
//		- the string value `notFound` is used as the string argument, e.g. projectID
//		- a negative int/float value is used as the int/float argument, e.g. database ID
func NewMockHTTPClient() HTTPClient {
	return mockHTTPClient{
		map[string]map[string]mockResponse{ {{ range $path, $o := .EndpointsResponseExample }}
			    "{{ $path }}": { {{ range $method, $resp := $o }}
			        "{{ $method }}": mockResponse{
			                Content: `{{ $resp.Content }}`,
			                Code: {{ $resp.Code }},
			            },
			        {{- end }}
			    },
			{{ end -}}
		},
	}
}

type mockResponse struct {
	Content string
	Code    int
}

// mockHTTPClient defines http client to mock the SDK client.
type mockHTTPClient struct {
	// endpoints denotes response mock split by
	// - the object notifier from the request path:
	// 		/projects - for projects
	// 		/project/branches - for branches
	// 		/project/branches/endpoints - for endpoints
	// - request REST method
	endpoints map[string]map[string]mockResponse
}

func (m mockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	if r := authErrorResp(req); r != nil {
		return r, nil
	}

	p := parsePath(strings.TrimPrefix(req.URL.RawPath, baseURL))

	endpoint, ok := m.endpoints[p.path]
	if !ok {
		o := Error{HTTPCode: http.StatusBadRequest}
		o.errorResp.Message = "unknown endpoint"
		return o.httpResp(), nil
	}

	resp, ok := endpoint[req.Method]
	if !ok {
		o := Error{HTTPCode: http.StatusMethodNotAllowed}
		o.errorResp.Message = "method not allowed"
		return o.httpResp(), nil
	}

	if p.objNotFound {
		o := Error{HTTPCode: http.StatusNotFound}
		o.errorResp.Message = "object not found"
		return o.httpResp(), nil
	}

	return &http.Response{
		Status:        "OK",
		StatusCode:    resp.Code,
		Body:          io.NopCloser(strings.NewReader(resp.Content)),
		ContentLength: int64(len(resp.Content)),
		Request:       req,
	}, nil
}

type objPath struct {
	path        string
	objNotFound bool
}

func parsePath(s string) objPath {
	s = strings.TrimPrefix(s, "/")
	o := ""
	var notFoundReq bool
	for i, el := range strings.Split(s, "/") {
		if i%2 == 0 && len(el) > 0 {
			o += "/" + el
			continue
		}

		if el == "notFound" || el == "notExist" || el == "notExists" || el == "missing" {
            notFoundReq = true
        }
        if v, err := strconv.ParseInt(el, 10, 64); nil == err && v < 0 {
            notFoundReq = true
        }
        if v, err := strconv.ParseFloat(el, 64); nil == err && v < 0 {
            notFoundReq = true
        }
	}
	return objPath{
		path:        o,
		objNotFound: notFoundReq,
	}
}

func authErrorResp(req *http.Request) *http.Response {
	token := req.Header.Get("Authorization")
	if token == "" || token == "Bearer invalidApiKey" {
		o := Error{HTTPCode: http.StatusForbidden}
		o.Message = "authorization failed"
		return o.httpResp()
	}
	return nil
}
